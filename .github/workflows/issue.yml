name: Snyk Security Scan and Code Scanning Issue Creation

on:
  push:
    branches:
      - main

permissions:
  actions: write
  issues: write  # Allows creation of issues
  security-events: write

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: "--json-file-output=path/snyk_results.json"

      - name: Check if snyk_results.json exists and display contents
        run: |
          ls -la path/  # List files to check if snyk_results.json exists
          cat path/snyk_results.json  # Display the contents of the snyk_results.json for debugging

      - name: Fetch Code Scanning Alerts and Debug Response
        run: |
          # Fetch the latest code scanning alerts from GitHub API
          RESPONSE=$(curl -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts")
          
          echo "Response from GitHub API:"
          echo "$RESPONSE"
          
          # Check if the response is empty or invalid
          if [[ -z "$RESPONSE" ]]; then
            echo "No response from GitHub API"
            exit 1
          fi

          # Attempt to parse the JSON
          echo "$RESPONSE" | jq .  # Attempt to validate the JSON response

          # Process the alerts if valid JSON
          if [ "$(echo "$RESPONSE" | jq '. | length')" -gt 0 ]; then
            echo "Code Scanning Alerts found! Creating issues..."

            # Loop through each alert and process it
            echo "$RESPONSE" | jq -r '.[] | 
              {
                rule_name: .rule.name,
                message: .message.text,
                severity: .severity,
                alert_url: .html_url,
                location: .locations[0].physicalLocation.artifactLocation.uri,
                start_line: .locations[0].physicalLocation.region.startLine
              }' | while read alert; do

              # Extract alert details from JSON
              RULE_NAME=$(echo $alert | jq -r '.rule_name')
              MESSAGE=$(echo $alert | jq -r '.message')
              SEVERITY=$(echo $alert | jq -r '.severity')
              ALERT_URL=$(echo $alert | jq -r '.alert_url')
              LOCATION=$(echo $alert | jq -r '.location')
              START_LINE=$(echo $alert | jq -r '.start_line')

              # Format the issue title and body
              ISSUE_TITLE="Fix code scanning alert - $RULE_NAME"
              ISSUE_BODY="<!-- Warning: The suggested title contains the alert rule name. This can expose security information. -->\n\n
              **Severity**: $SEVERITY\n
              **Message**: $MESSAGE\n
              **Location**: $LOCATION\n
              **Start Line**: $START_LINE\n\n
              Tracking issue for:\n- [ ] $ALERT_URL"
              
              # Create GitHub issues using the formatted title and body
              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                https://api.github.com/repos/${{ github.repository }}/issues
            done
          else
            echo "No code scanning alerts found."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
