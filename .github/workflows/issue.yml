name: Code Scanning Alerts to Issues

on:
  push:
    branches:
      - main

permissions:
  actions: write
  issues: write  # Allows creating issues
  security-events: read

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the repository
        uses: actions/checkout@v2

      - name: Fetch code scanning alerts from GitHub API
        run: |
          # Fetch the latest code scanning alerts from GitHub API
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts")

          # Log the raw response for debugging purposes
          echo "Raw Response from GitHub API:"
          echo "$RESPONSE"

          # Check if the response is empty
          if [[ -z "$RESPONSE" ]]; then
            echo "Error: No response received from GitHub API."
            exit 1
          fi

          # Check for API error message or rate limiting (look for specific error messages in the response)
          if echo "$RESPONSE" | jq -e 'has("message")' > /dev/null; then
            ERROR_MSG=$(echo "$RESPONSE" | jq -r '.message')
            echo "Error received from GitHub API: $ERROR_MSG"
            exit 1
          fi

          # Check if the response contains valid JSON
          echo "$RESPONSE" | jq . > /dev/null || { echo "Error: Invalid JSON response from GitHub API"; exit 1; }

          # Get the total number of alerts
          ALERT_COUNT=$(echo "$RESPONSE" | jq '. | length')
          echo "Total Alerts: $ALERT_COUNT"

          if [ "$ALERT_COUNT" -gt 0 ]; then
            echo "Code Scanning Alerts found! Creating issues..."

            # Loop through each alert and extract details
            echo "$RESPONSE" | jq -r '.[] | 
              {
                rule_name: .rule.name,
                message: .message.text,
                severity: .severity,
                alert_url: .html_url,
                location: .locations[0].physicalLocation.artifactLocation.uri,
                start_line: .locations[0].physicalLocation.region.startLine
              }' | while read alert; do

              # Log the alert details
              echo "Alert details: $alert"

              # Extract values for title and body from the alert
              RULE_NAME=$(echo $alert | jq -r '.rule_name')
              MESSAGE=$(echo $alert | jq -r '.message')
              SEVERITY=$(echo $alert | jq -r '.severity')
              ALERT_URL=$(echo $alert | jq -r '.alert_url')
              LOCATION=$(echo $alert | jq -r '.location')
              START_LINE=$(echo $alert | jq -r '.start_line')

              # Log extracted values for debugging
              echo "Extracted Values:"
              echo "RULE_NAME: $RULE_NAME"
              echo "MESSAGE: $MESSAGE"
              echo "SEVERITY: $SEVERITY"
              echo "ALERT_URL: $ALERT_URL"
              echo "LOCATION: $LOCATION"
              echo "START_LINE: $START_LINE"

              # Format the issue title and body
              ISSUE_TITLE="Fix code scanning alert - $RULE_NAME"
              ISSUE_BODY="<!-- Warning: The suggested title contains the alert rule name. This can expose security information. -->\n\n
              **Severity**: $SEVERITY\n
              **Message**: $MESSAGE\n
              **Location**: $LOCATION\n
              **Start Line**: $START_LINE\n\n
              Tracking issue for:\n- [ ] $ALERT_URL"
              
              # Create GitHub issue with the extracted data
              echo "Creating issue with title: $ISSUE_TITLE"
              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                https://api.github.com/repos/${{ github.repository }}/issues
            done
          else
            echo "No code scanning alerts found."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
