name: Snyk Security Scan and Issue Creation from Code Scanning

on:
  push:
    branches:
      - main

permissions:
  actions: write
  issues: write  # Allows creation of issues
  security-events: write

jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: "--json-file-output=path/snyk_results.json"

      - name: Check if snyk_results.json exists and display contents
        run: |
          ls -la path/  # List files to check if snyk_results.json exists
          cat path/snyk_results.json  # Display the contents of the snyk_results.json for debugging

      - name: Extract Code Scanning Alerts and Create Issues
        run: |
          # Fetch the latest code scanning alerts from GitHub API
          CODE_SCANNING_ALERTS=$(curl -H "Authorization: token ${{ secrets.GH_PAT }}" \
            "https://api.github.com/repos/${{ github.repository }}/code-scanning/alerts")

          # Check if there are any alerts
          if [ "$(echo $CODE_SCANNING_ALERTS | jq '. | length')" -gt 0 ]; then
            echo "Code Scanning Alerts found! Creating issues..."

            # Loop through each alert
            echo "$CODE_SCANNING_ALERTS" | jq -r '.[] | "\(.rule.name): \(.message.text) - URL: \(.html_url)"' | while read alert; do
              # Extract alert title and URL
              ALERT_NAME=$(echo $alert | cut -d ':' -f1)
              ALERT_URL=$(echo $alert | cut -d ' ' -f3)
              
              # Format the issue title and body
              ISSUE_TITLE="Fix code scanning alert - $ALERT_NAME"
              echo "$ALERT_URL"
              ISSUE_BODY="<!-- Warning: The suggested title contains the alert rule name. This can expose security information. -->\n\nTracking issue for:\n- [ ] $ALERT_URL"
              
              # Create GitHub issues using the formatted title and body
              curl -X POST -H "Authorization: token ${{ secrets.GH_PAT }}" \
                -d "{\"title\":\"$ISSUE_TITLE\", \"body\":\"$ISSUE_BODY\", \"labels\":[\"security\"]}" \
                https://api.github.com/repos/${{ github.repository }}/issues
            done
          else
            echo "No code scanning alerts found."
          fi
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
